{"version":3,"file":"filesretriever.16a8210e0ff69a6687d6.hot-update.js","sources":["webpack:///./src/redturtle/filesretriever/browser/static/react/javascripts/filesretriever/FilesListWrapper/index.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport DataTable from 'react-data-table-component';\nimport { TranslationsContext } from '../../TranslationsContext';\nimport { ApiContext } from '../../ApiContext';\nimport { getTranslations } from '../utils';\nimport TitleRow from '../TitleRow';\nimport ReactTooltip from 'react-tooltip';\n\nimport './index.less';\n\nconst FilesListWrapper = () => {\n  const getTranslationFor = useContext(TranslationsContext);\n  const labels = getTranslations(getTranslationFor);\n  const [toggleCleared, setToggleCleared] = useState(false);\n  const [selectedRows, setSelectedRows] = React.useState([]);\n  const { data, loading, updateTextRow, saveFiles } = useContext(ApiContext);\n\n  //------------------COLUMNS----------------------\n  const StatusCell = row => {\n    let statusIcon = '';\n    if (row.created === true) {\n      statusIcon = (\n        <span className=\"glyphicon glyphicon-ok-sign success\"></span>\n      );\n    } else if (row.created === false) {\n      statusIcon = (\n        <span\n          className=\"glyphicon glyphicon-alert error\"\n          data-tip={row.error}\n        ></span>\n      );\n    }\n    return (\n      <div className=\"status\">\n        {statusIcon}\n        <ReactTooltip place=\"bottom\" type=\"dark\" effect=\"solid\" />\n      </div>\n    );\n  };\n\n  const columns = [\n    {\n      name: labels.url,\n      cell: row => (\n        <div>\n          <a href={row.href} target=\"_blank\" rel=\"noopener noreferrer\">\n            <span\n              className=\"glyphicon glyphicon-link\"\n              data-tip={row.href}\n            ></span>\n          </a>\n          <ReactTooltip place=\"bottom\" type=\"dark\" effect=\"solid\" />\n        </div>\n      ),\n      width: '80px',\n    },\n    {\n      name: labels.title,\n      cell: (row, index) => (\n        <TitleRow\n          row={row}\n          index={index}\n          updateTextRow={updateTextRow}\n        ></TitleRow>\n      ),\n    },\n    {\n      name: labels.status,\n      cell: StatusCell,\n      width: '100px',\n    },\n  ];\n\n  //------------------ACTIONS----------------------\n  const handleRowSelected = React.useCallback(state => {\n    setSelectedRows(state.selectedRows);\n  }, []);\n\n  const contextActions = React.useMemo(() => {\n    const handleSave = () => {\n      // eslint-disable-next-line no-alert\n      if (\n        window.confirm(\n          `${labels.saveConfirm} \\n${selectedRows\n            .map(r => '> ' + r.text)\n            .join('\\n')}`,\n        )\n      ) {\n        const params = { urls: selectedRows };\n        saveFiles({ endpoint: 'save-files', params, method: 'POST' });\n        setToggleCleared(!toggleCleared);\n      }\n    };\n\n    return (\n      <button\n        key=\"save\"\n        onClick={handleSave}\n        className=\"plone-btn plone-btn-info\"\n      >\n        {labels.save}\n      </button>\n    );\n  }, [selectedRows, toggleCleared]);\n\n  //------------------TABLE----------------------\n\n  return (\n    <div className=\"files-list\">\n      <DataTable\n        title={labels.tableTitle}\n        columns={columns}\n        data={data.links}\n        striped={true}\n        highlightOnHover={true}\n        pointerOnHover={false}\n        noDataComponent={labels.noFiles}\n        responsive={true}\n        progressPending={loading}\n        selectableRows\n        onSelectedRowsChange={handleRowSelected}\n        clearSelectedRows={toggleCleared}\n        selectableRowDisabled={row => row.created === true}\n        contextActions={contextActions}\n        contextMessage={{\n          singular: labels.singularSelected,\n          plural: labels.pluralSelected,\n          message: '',\n        }}\n      />\n    </div>\n  );\n};\nexport default FilesListWrapper;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AARA;AAWA;AAbA;AAgBA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAWA;AACA;AACA;AAHA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAfA;AAuBA;AACA;AAAA;;;;A","sourceRoot":""}